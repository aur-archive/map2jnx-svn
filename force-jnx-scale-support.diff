Index: src/main.cpp
===================================================================
--- src/main.cpp	(revision 3373)
+++ src/main.cpp	(working copy)
@@ -534,12 +534,13 @@
     char *subscname_buf = NULL;
     char *mapname_buf   = NULL;
 
+    std::vector<int> forced_scale_values;
 
     printf("\n****** %s ******\n", WHAT_STR);
 
     if(argc < 2)
     {
-        fprintf(stderr,"\nusage: map2jnx -q <1..100> -s <411|422|444> -p <0..> -c \"copyright notice\" -m \"BirdsEye\" -n \"Unknown\" <file1> <file2> ... <fileN> <outputfile>\n");
+        fprintf(stderr,"\nusage: map2jnx -q <1..100> -s <411|422|444> -p <0..> -c \"copyright notice\" -m \"BirdsEye\" -n \"Unknown\" -x file1_scale,file2_scale,...,fileN_scale <file1> <file2> ... <fileN> <outputfile>\n");
         fprintf(stderr,"\n");
         fprintf(stderr,"  -q The JPEG quality from 1 to 100. Default is 75 \n");
         fprintf(stderr,"  -s The chroma subsampling. Default is 411  \n");
@@ -548,6 +549,7 @@
         fprintf(stderr,"  -m The subscription product name. Default is \"BirdsEye\"  \n");
         fprintf(stderr,"  -n The map name. Default is \"Unknown\"  \n");
         fprintf(stderr,"  -z The z order (drawing order). Default is 25\n");
+        fprintf(stderr,"  -x Override levels scale. Default: autodetect\n");
         fprintf(stderr,"\n");
         fprintf(stderr,"\nThe projection of the input files must have the same latitude along");
         fprintf(stderr,"\na pixel row. Mecator and Longitude/Latitude projections match this");
@@ -556,7 +558,26 @@
         fprintf(stderr,"\nTo rectify a geotiff map, you can use the gdalwarp command, e.g.");
         fprintf(stderr,"\ngdalwarp -t_srs \"EPSG:4326\" <inputfile> <outputfile>");
         fprintf(stderr,"\n");
+        fprintf(stderr,"Scale levels must be pass in same order as level files pointed.\n");
+        fprintf(stderr,"Empty and zero values equal to autodetect. We can point only needed\n");
+        fprintf(stderr,"levels, like:\n");
+        fprintf(stderr,"  -x 45356,,,75; -x ,,,,75\n");
+        fprintf(stderr,"Calculated levels table can be found:\n");
+        fprintf(stderr,"  English: http://whiter.brinkster.net/en/JNX.shtml\n");
+        fprintf(stderr,"  Russian: http://whiter.brinkster.net/JNX.shtml\n");
+        fprintf(stderr,"Most common values for different map scales:\n");
+        fprintf(stderr,"  JNX scale              Map scale\n");
+        fprintf(stderr,"  -------------          ---------\n");
+        fprintf(stderr,"  78125-31250            1:1 000 000\n");
+        fprintf(stderr,"  20834-7813             1:500 000\n");
+        fprintf(stderr,"  7813-3125              1:200 000\n");
+        fprintf(stderr,"  3125-2084              1:100 000\n");
+        fprintf(stderr,"  2084-782               1:50 000\n");
+        fprintf(stderr,"  782-32                 1:25 000\n");
+        fprintf(stderr,"  32-21                  1:10 000\n");
+        fprintf(stderr,"  21-14                  1:5000, 1:2000\n");
         fprintf(stderr,"\n");
+        fprintf(stderr,"\n");
         exit(-1);
     }
 
@@ -620,7 +641,32 @@
                 skip_next_arg = 1;
                 continue;
             }
+            else if (towupper(argv[i][1]) == 'X')
+            {
+                skip_next_arg = 1;
 
+                std::string scales_buf(get_argv(i + 1, argv));
+                size_t pos = 0;
+                size_t last_pos = 0;
+
+                pos = scales_buf.find_first_of(',');
+                std::string val;
+                while (pos != std::string::npos)
+                {
+                    val = scales_buf.substr(last_pos, pos - last_pos);
+                    last_pos = pos + 1;
+                    pos = scales_buf.find_first_of(',', pos + 1);
+                    
+                    //printf("val: %s : %d\n", val.c_str(), pos);
+                    forced_scale_values.push_back(atol(val.c_str()));
+                }
+                val = scales_buf.substr(last_pos, pos);
+                //printf("val: %s : %d\n", val.c_str(), pos);
+                forced_scale_values.push_back(atol(val.c_str()));
+                
+                continue;
+            }
+
         }
 
         files_count++;
@@ -821,7 +867,16 @@
 
 
         level.offset    = tilesTotal * sizeof(jnx_tile_t) + HEADER_BLOCK_SIZE; // still has to be offset by complete header
-        level.scale     = scale2jnx(scale);
+        if (forced_scale_values.size() == 0 ||
+            i >= forced_scale_values.size() || 
+            forced_scale_values[i] == 0)
+        {
+            level.scale     = scale2jnx(scale);
+        }
+        else
+        {
+            level.scale     = forced_scale_values[i];
+        }
         tilesTotal     += level.nTiles;
 
         fwrite(&level.nTiles, sizeof(level.nTiles), 1, fid);
